mov  (%rsp), %rax - разименовываем значение в rsp и кидаем в rax. Здесь мы запишем число аргументов программы в rax.

mov  8(%rsp), %rax - возьми rsp, прибавь к нему 8, прочитай 8 байт по получтвшемуся адресу и положи в rax, то есть имя исполняемого файла.

# инструкция xchg меняет значения местами
xchg 16(%rsp,%rcx,8), %rax
Читается так: «посчитай rcx*8 + rsp + 16, и поменяй местами 8 байт (размер регистра) по получившемуся адресу и значение регистра rax». Другими словами, rsp и 16 все так же играют роль смещения, rcx играет роль индекса в массиве, а 8 — это размер элемента массива. При использовании данного синтаксиса допустимыми размерами элемента являются только 1, 2, 4 и 8. Если требуется какой-то другой размер, можно использовать инструкции умножения, бинарного сдвига и прочие.

.data
msg:
  .ascii "Hello, world!\n"
.text

.globl _start
_start:
  # обнуление rcx
  xor %rcx, %rcx
  mov msg(,%rcx,8), %al
  mov msg, %ah

# rax := rcx*8 + rax + 123
lea 123(%rax,%rcx,8), %rax

movabs $0x1122334455667788, %rax - запись в 64-битный регистр
